// Code generated by go-swagger; DO NOT EDIT.

package openapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Scope scope
//
// swagger:model Scope
type Scope struct {

	// actions
	// Required: true
	Actions []string `json:"actions"`

	caveatsField []Caveat

	// an identifier for a document stored in the Vault Server.
	// Required: true
	DocID *string `json:"docID"`
}

// Caveats gets the caveats of this base type
func (m *Scope) Caveats() []Caveat {
	return m.caveatsField
}

// SetCaveats sets the caveats of this base type
func (m *Scope) SetCaveats(val []Caveat) {
	m.caveatsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Scope) UnmarshalJSON(raw []byte) error {
	var data struct {
		Actions []string `json:"actions"`

		Caveats json.RawMessage `json:"caveats"`

		DocID *string `json:"docID"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propCaveats []Caveat
	if string(data.Caveats) != "null" {
		caveats, err := UnmarshalCaveatSlice(bytes.NewBuffer(data.Caveats), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propCaveats = caveats
	}

	var result Scope

	// actions
	result.Actions = data.Actions

	// caveats
	result.caveatsField = propCaveats

	// docID
	result.DocID = data.DocID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Scope) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Actions []string `json:"actions"`

		DocID *string `json:"docID"`
	}{

		Actions: m.Actions,

		DocID: m.DocID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Caveats []Caveat `json:"caveats"`
	}{

		Caveats: m.caveatsField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this scope
func (m *Scope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaveats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Scope) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	return nil
}

func (m *Scope) validateCaveats(formats strfmt.Registry) error {
	if swag.IsZero(m.Caveats()) { // not required
		return nil
	}

	for i := 0; i < len(m.Caveats()); i++ {

		if err := m.caveatsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("caveats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Scope) validateDocID(formats strfmt.Registry) error {

	if err := validate.Required("docID", "body", m.DocID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scope based on the context it is used
func (m *Scope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCaveats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Scope) contextValidateCaveats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Caveats()); i++ {

		if err := m.caveatsField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("caveats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Scope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Scope) UnmarshalBinary(b []byte) error {
	var res Scope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
